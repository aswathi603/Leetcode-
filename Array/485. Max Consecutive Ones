485. Max Consecutive Ones
Description
Given a binary array nums, return the maximum number of consecutive 1's in the array.

Example 1:
Input: nums = [1,1,0,1,1,1]
Output: 3
Explanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.

Example 2:
Input: nums = [1,0,1,1,0,1]
Output: 2

Constraints:
1 <= nums.length <= 105
nums[i] is either 0 or 1.

Solution:
Java:
class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int maxCount = 0;
        int currentCount = 0;

        for (int num : nums) {
            if (num == 1) {
                currentCount++;
            } else {
                maxCount = Math.max(maxCount, currentCount);
                currentCount = 0;
            }
        }

        // Final check in case the array ends with a series of 1's
        maxCount = Math.max(maxCount, currentCount);

        return maxCount;
    }
}

C++
class Solution {
public:
    int findMaxConsecutiveOnes(vector<int>& nums) {
        int max_count = 0;
    int current_count = 0;

    for (int num : nums) {
        if (num == 1) {
            current_count++;
        } else {
            max_count = max(max_count, current_count);
            current_count = 0;
        }
    }

    max_count = max(max_count, current_count);

    return max_count;
    }
};

Python3/Python
class Solution:
    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:
        max_count = 0
        current_count = 0
        
        for num in nums:
            if num == 1:
                current_count += 1
            else:
                max_count = max(max_count, current_count)
                current_count = 0
                
        # Final check in case the array ends with a series of 1's
        max_count = max(max_count, current_count)
        
        return max_count
